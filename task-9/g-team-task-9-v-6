Пропускная способность дуг сети указана в таблице.

|          Дуги          | sa | sb | ac | ab | bc | bd | cd | dt |
|:----------------------:|:--:|:--:|:--:|:--:|:--:|----|----|----|
| Пропускная способность | 3  | 6  | 5  | 2  | 4  | 7  | 8  | 12 |

### 1. Построим сеть с источником **s**, стоком **t** и указанными пропускными способностями дуг.

```mermaid
graph LR
    s-->|3|a
    s-->|6|b
    a-->|5|c
    a-->|2|b
    b-->|4|c
    b-->|7|d
    c-->|8|d
    d-->|12|t
```

Построим остаточную сеть. Так как изначально поток в сети не задан, все дуги сети являются пустыми (локальный поток равен нулю), соответственно в остаточную сеть необходимо вынести обратную дугу с весом равным пропускной способности. 

```mermaid
graph RL
    a-.->|3|s
    b-.->|6|s
    c-.->|5|a
    b-.->|2|a
    c-.->|4|b
    d-.->|7|b
    d-.->|8|c
    t-.->|12|d
```

### 2. Проведем поиск увеличивающего пути в остаточной сети
В остаточной сети найден увеличивающий путь t -> d -> b -> a -> s. Минимальный вес дуг на этом пути равен 2.

Уменьшим вес дуг на найденном пути, дуги для которых вес стал нулевым удалим из остаточной сети.

```mermaid
graph RL
    a-.->|1|s
    b-.->|6|s
    c-.->|5|a
    c-.->|4|b
    d-.->|5|b
    d-.->|8|c
    t-.->|10|d
    s--->|2|a
    a--->|2|b
    b--->|2|d
    d--->|2|t
```

Скорректируем соответствующим образом локальные потоки в исходной сети. Первым числом будем указывать локальный поток, вторым пропускную способность дуги. 

```mermaid
graph LR
    s-->|"(2, 3)"|a
    s-->|"(0, 6)"|b
    a-->|"(0, 5)"|c
    a-->|"(2, 2)"|b
    b-->|"(0, 4)"|c
    b-->|"(2, 7)"|d
    c-->|"(0, 8)"|d
    d-->|"(2, 12)"|t
```

### 3. Продолжим поиск увеличивающего пути в остаточной сети

```mermaid
graph RL
    a-.->|1|s
    b-.->|6|s
    c-.->|5|a
    c-.->|4|b
    d-.->|5|b
    d-.->|8|c
    t-.->|10|d
    s--->|2|a
    a--->|2|b
    b--->|2|d
    d--->|2|t
```

В остаточной сети найден увеличивающий путь t -> d -> b -> s. Минимальный вес дуг на этом пути равен 5.

Уменьшим вес дуг на найденном пути, дуги для которых вес стал нулевым удалим из остаточной сети.

```mermaid
graph LR
    a-.->|1|s
    b-.->|1|s
    c-.->|5|a
    c-.->|4|b
    d-.->|8|c
    t-.->|5|d
    s--->|2|a
    a--->|2|b
    b--->|7|d
    d--->|7|t
    s--->|5|b
```

Скорректируем соответствующим образом локальные потоки в исходной сети.

```mermaid
graph LR
    s-->|"(2, 3)"|a
    s-->|"(5, 6)"|b
    a-->|"(0, 5)"|c
    a-->|"(2, 2)"|b
    b-->|"(0, 4)"|c
    b-->|"(7, 7)"|d
    c-->|"(0, 8)"|d
    d-->|"(7, 12)"|t
```

### 4. Продолжим поиск увеличивающего пути в остаточной сети

```mermaid
graph LR
    a-.->|1|s
    b-.->|1|s
    c-.->|5|a
    c-.->|4|b
    d-.->|8|c
    t-.->|5|d
    s--->|2|a
    a--->|2|b
    b--->|7|d
    d--->|7|t
    s--->|5|b
```

В остаточной сети найден увеличивающий путь t -> d -> c -> b -> s. Минимальный вес дуг на этом пути равен 1.

Уменьшим вес дуг на найденном пути, дуги для которых вес стал нулевым удалим из остаточной сети.

```mermaid
graph LR
    s--->|2|a
    a-.->|1|s
    c-.->|5|a
    c-.->|3|b
    b-.->|1|c
    d-.->|7|c
    t-.->|4|d
    a--->|2|b
    b--->|7|d
    d--->|8|t
    s--->|6|b
    c--->|1|d
```

Скорректируем соответствующим образом локальные потоки в исходной сети.

```mermaid
graph LR
    s-->|"(2, 3)"|a
    s-->|"(6, 6)"|b
    a-->|"(0, 5)"|c
    a-->|"(2, 2)"|b
    b-->|"(1, 4)"|c
    b-->|"(7, 7)"|d
    c-->|"(1, 8)"|d
    d-->|"(8, 12)"|t
```

### 5. Продолжим поиск увеличивающего пути в остаточной сети

```mermaid
graph LR
    a-.->|1|s
    b-.->|1|s
    c-.->|5|a
    c-.->|4|b
    d-.->|8|c
    t-.->|5|d
    s--->|2|a
    a--->|2|b
    b--->|7|d
    d--->|7|t
    s--->|5|b
```

В остаточной сети найден увеличивающий путь t -> d -> c -> a -> s. Минимальный вес дуг на этом пути равен 1.

Уменьшим вес дуг на найденном пути, дуги для которых вес стал нулевым удалим из остаточной сети.

```mermaid
graph LR
    s--->|3|a
    c-.->|4|a
    c-.->|3|b
    b-.->|1|c
    d-.->|6|c
    t-.->|3|d
    a--->|2|b
    b--->|7|d
    d--->|9|t
    s--->|6|b
    c--->|2|d
    a--->|1|c
```

Скорректируем соответствующим образом локальные потоки в исходной сети.

```mermaid
graph LR
    s-->|"(3, 3)"|a
    s-->|"(6, 6)"|b
    a-->|"(1, 5)"|c
    a-->|"(2, 2)"|b
    b-->|"(1, 4)"|c
    b-->|"(7, 7)"|d
    c-->|"(2, 8)"|d
    d-->|"(9, 12)"|t
```


### 6. Продолжим поиск увеличивающего пути в остаточной сети
В остаточной сети не найдено увеличивающих путей, следовательно, алгоритм завершил работу и найденный поток величиной 9 является максимальным для данной сети.

### 7. Проверим значение максимального потока перебором всех разрезов сети.
Разрез сети - разбиение множества вершин на два подмножества V<sub>1</sub> и V<sub>2</sub>, где во множество V<sub>1</sub> входит источник, а в V<sub>2</sub> входит сток.

Пропускная способность разреза - сумма пропускной способности дуг, начинающихся в вершинах из множества V<sub>1</sub> и оканчивающихся в вершинах из V<sub>2</sub>.

Для сети из _n_ вершин существует 2<sup>n - 2</sup> различных разрезов, так как две вершины из множества (источник и сток) "зафиксированы" в V<sub>1</sub> и V<sub>2</sub>, остальные вершины можно различными способами распределять между множествами V<sub>1</sub> и V<sub>2</sub>.

Для сети из 6 вершин нужно найти 2<sup>6 - 2</sup> = 2<sup>4</sup> = 16 разрезов. 

| №  | V<sub>1</sub>                     | V<sub>2</sub> | Пропускная способность разреза |
|----|:----------------------------------|:--------------|:------------------------------:|
| 1  | s                                 | a, b, c, d, t |          3 + 6 = 9             |
|    | **s + одна вершина из a, b, c, d**|               |                                |
| 2  | s, a                              | b, c, d, t    |      6 + 5 + 2 = 13            |
| 3  | s, b                              | a, c, d, t    |      3 + 7 + 4 = 14            |
| 4  | s, c                              | a, b, d, t    |      3 + 6 + 8 = 17            |
| 5  | s, d                              | a, b, c, t    |      3 + 6 + 9 = 12            |
|    | **s + пара вершин из a, b, c, d** |               |                                |
| 6  | s, a, b                           | c, d, t       |      5 + 4 + 7 = 16            |
| 7  | s, a, c                           | b, d, t       |      6 + 2 + 8 = 16            |
| 8  | s, a, d                           | b, c, t       |      5 + 2 + 6 + 12 = 25       |
| 9  | s, b, c                           | a, d, t       |      3 + 7 + 8 = 18            |
| 10 | s, b, d                           | a, c, t       |      3 + 4 + 12 = 19           |
| 11 | s, c, d                           | a, b, t       |      3 + 6 + 12 = 21           |
|    | **s + три вершины из a, b, c, d** |               |                                |
| 12 | s, a, b, c                        | d, t          |      8 + 7 = 15                |
| 13 | s, a, b, d                        | c, t          |      4 + 12 + 5 = 21           |
| 14 | s, a, c, d                        | b, t          |      12 + 2 + 6 = 20           |
| 15 | s, b, c, d                        | a, t          |      3 + 12 = 15               |
|    | **s + все четыре вершины**        |               |                                |
| 16 | s, a, b, c, d                     | t             |      12                        |

Минимальная пропускная способность разреза равна 9 ( {s} / {t, a, b, c, d} ), что совпадает с найденной величиной максимального потока в сети.

### Ответ:
Максимальный поток в сети равен 9, он реализуется следующим локальными потоками:

```mermaid
graph LR
    s-->|"(3, 3)"|a
    s-->|"(6, 6)"|b
    a-->|"(1, 5)"|c
    a-->|"(2, 2)"|b
    b-->|"(1, 4)"|c
    b-->|"(7, 7)"|d
    c-->|"(2, 8)"|d
    d-->|"(9, 12)"|t
```
